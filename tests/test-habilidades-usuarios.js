const axios = require('axios');

const BASE_URL = process.env.API_URL || 'http://localhost:3002/api';
const TEST_USER_ID = 1;
const TEST_HABILIDADE_ID = 1;

console.log('üß™ Iniciando testes da API Habilidades de Usu√°rios');
console.log('üìç URL Base:', BASE_URL);

// Dados de teste
const dadosHabilidade = {
  id_usuario: TEST_USER_ID,
  id_habilidade: TEST_HABILIDADE_ID,
  nivel: 3
};

const dadosHabilidadeAtualizada = {
  id_usuario: TEST_USER_ID,
  id_habilidade: TEST_HABILIDADE_ID,
  nivel: 4
};

// Fun√ß√£o auxiliar para fazer requisi√ß√µes
async function makeRequest(method, endpoint, data = null, headers = {}) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data || error.message, 
      status: error.response?.status 
    };
  }
}

// Teste 1: Adicionar habilidade (POST)
async function testAdicionarHabilidade() {
  console.log('\nüß™ Teste 1: Adicionar habilidade (POST)');
  
  const result = await makeRequest('POST', '/habilidades-usuarios', dadosHabilidade);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! Habilidade adicionada');
    console.log('üìä Status:', result.status);
    console.log('üìù Dados criados:', JSON.stringify(result.data.data, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha ao adicionar habilidade');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 2: Buscar habilidades por usu√°rio (GET)
async function testBuscarHabilidadesPorUsuario() {
  console.log('\nüß™ Teste 2: Buscar habilidades por usu√°rio (GET)');
  
  const result = await makeRequest('GET', `/habilidades-usuarios/usuario/${TEST_USER_ID}`);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! Habilidades encontradas');
    console.log('üìä Status:', result.status);
    console.log('üìù Total habilidades:', result.data.data.total_habilidades);
    console.log('üìù Usu√°rio:', result.data.data.usuario.nome);
    return true;
  } else {
    console.log('‚ùå Falha ao buscar habilidades');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 3: Adicionar habilidade novamente (POST - cria√ß√£o cont√≠nua)
async function testCriacaoContinua() {
  console.log('\nüß™ Teste 3: Adicionar habilidade novamente (POST - cria√ß√£o cont√≠nua)');
  
  const result = await makeRequest('POST', '/habilidades-usuarios', dadosHabilidadeAtualizada);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! Nova habilidade adicionada (cria√ß√£o cont√≠nua)');
    console.log('üìä Status:', result.status);
    console.log('üìù Dados criados:', JSON.stringify(result.data.data, null, 2));
    console.log('üìù Mensagem:', result.data.message);
    return true;
  } else {
    console.log('‚ùå Falha ao adicionar habilidade novamente');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 4: Verificar que GET retorna o registro mais recente
async function testVerificarRegistroMaisRecente() {
  console.log('\nüß™ Teste 4: Verificar que GET retorna o registro mais recente');
  
  const result = await makeRequest('GET', `/habilidades-usuarios/usuario/${TEST_USER_ID}`);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! Verifica√ß√£o do registro mais recente');
    console.log('üìä Status:', result.status);
    
    const habilidades = result.data.data.habilidades;
    const habilidadeTeste = habilidades.find(h => h.id_habilidade === TEST_HABILIDADE_ID);
    
    if (habilidadeTeste) {
      console.log('üìù Habilidade encontrada:', habilidadeTeste.titulo);
      console.log('üìù N√≠vel atual:', habilidadeTeste.nivel);
      console.log('üìù Created at:', habilidadeTeste.created_at);
      
      // Verificar se o n√≠vel corresponde ao mais recente (4)
      if (habilidadeTeste.nivel === 4) {
        console.log('‚úÖ GET retornou corretamente o registro mais recente (n√≠vel 4)');
        return true;
      } else {
        console.log('‚ö†Ô∏è GET n√£o retornou o registro mais recente');
        return false;
      }
    } else {
      console.log('‚ö†Ô∏è Habilidade de teste n√£o encontrada');
      return false;
    }
  } else {
    console.log('‚ùå Falha ao verificar registro mais recente');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 5: Buscar habilidade espec√≠fica (GET por ID)
async function testBuscarHabilidadeEspecifica() {
  console.log('\nüß™ Teste 5: Buscar habilidade espec√≠fica (GET por ID)');
  
  // Primeiro, buscar habilidades para obter um ID v√°lido
  const habilidadesResult = await makeRequest('GET', `/habilidades-usuarios/usuario/${TEST_USER_ID}`);
  
  if (!habilidadesResult.success) {
    console.log('‚ùå Falha ao buscar habilidades para obter ID');
    return false;
  }
  
  const habilidades = habilidadesResult.data.data.habilidades;
  const habilidadeComId = habilidades.find(h => h.id);
  
  if (!habilidadeComId) {
    console.log('‚ö†Ô∏è Nenhuma habilidade com ID encontrada');
    return false;
  }
  
  const result = await makeRequest('GET', `/habilidades-usuarios/${habilidadeComId.id}`);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! Habilidade espec√≠fica encontrada');
    console.log('üìä Status:', result.status);
    console.log('üìù Dados:', JSON.stringify(result.data.data, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha ao buscar habilidade espec√≠fica');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 6: Valida√ß√£o de campos obrigat√≥rios
async function testValidacaoCamposObrigatorios() {
  console.log('\nüß™ Teste 6: Valida√ß√£o de campos obrigat√≥rios');
  
  // Teste sem id_usuario
  const dadosInvalidos = { ...dadosHabilidade };
  delete dadosInvalidos.id_usuario;
  
  const result = await makeRequest('POST', '/habilidades-usuarios', dadosInvalidos);
  
  if (!result.success && result.status === 400) {
    console.log('‚úÖ Sucesso! Valida√ß√£o funcionando (id_usuario obrigat√≥rio)');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha na valida√ß√£o de campos obrigat√≥rios');
    console.log('üìä Status:', result.status);
    console.log('üìù Resposta:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 7: Valida√ß√£o de n√≠vel inv√°lido
async function testValidacaoNivelInvalido() {
  console.log('\nüß™ Teste 7: Valida√ß√£o de n√≠vel inv√°lido');
  
  // Teste com n√≠vel inv√°lido (6)
  const dadosInvalidos = { ...dadosHabilidade };
  dadosInvalidos.nivel = 6;
  
  const result = await makeRequest('POST', '/habilidades-usuarios', dadosInvalidos);
  
  if (!result.success && result.status === 400) {
    console.log('‚úÖ Sucesso! Valida√ß√£o funcionando (n√≠vel fora do range 1-5)');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha na valida√ß√£o de n√≠vel inv√°lido');
    console.log('üìä Status:', result.status);
    console.log('üìù Resposta:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Executar todos os testes
async function runAllTests() {
  console.log('üöÄ Iniciando execu√ß√£o dos testes da API Habilidades de Usu√°rios');
  console.log('‚è∞', new Date().toISOString());
  
  const tests = [
    { name: 'Adicionar habilidade', fn: testAdicionarHabilidade },
    { name: 'Buscar habilidades por usu√°rio', fn: testBuscarHabilidadesPorUsuario },
    { name: 'Cria√ß√£o cont√≠nua', fn: testCriacaoContinua },
    { name: 'Verificar registro mais recente', fn: testVerificarRegistroMaisRecente },
    { name: 'Buscar habilidade espec√≠fica', fn: testBuscarHabilidadeEspecifica },
    { name: 'Valida√ß√£o campos obrigat√≥rios', fn: testValidacaoCamposObrigatorios },
    { name: 'Valida√ß√£o n√≠vel inv√°lido', fn: testValidacaoNivelInvalido }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      if (result) {
        passed++;
      } else {
        failed++;
      }
    } catch (error) {
      console.log(`‚ùå Erro no teste "${test.name}":`, error.message);
      failed++;
    }
  }
  
  console.log('\nüìä Resumo dos Testes');
  console.log('==================');
  console.log(`‚úÖ Passou: ${passed}`);
  console.log(`‚ùå Falhou: ${failed}`);
  console.log(`üìà Total: ${passed + failed}`);
  console.log(`üéØ Taxa de sucesso: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);
  
  if (failed === 0) {
    console.log('\nüéâ Todos os testes passaram!');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
    process.exit(1);
  }
}

// Executar testes se o arquivo for chamado diretamente
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('‚ùå Erro fatal durante execu√ß√£o dos testes:', error);
    process.exit(1);
  });
}

module.exports = {
  testAdicionarHabilidade,
  testBuscarHabilidadesPorUsuario,
  testCriacaoContinua,
  testVerificarRegistroMaisRecente,
  testBuscarHabilidadeEspecifica,
  testValidacaoCamposObrigatorios,
  testValidacaoNivelInvalido,
  runAllTests
};



