const axios = require('axios');
require('dotenv').config();

const API_BASE = `http://localhost:${process.env.PORT || 3002}/api`;

async function testAuthAPI() {
  console.log('üß™ Testando API de Autentica√ß√£o...\n');

  try {
    // Teste 1: Verificar se o servidor est√° rodando
    console.log('1Ô∏è‚É£ Verificando se o servidor est√° rodando...');
    try {
      const response = await axios.get(`${API_BASE}/test`);
      console.log('‚úÖ Servidor respondendo:', response.data.message);
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° rodando. Execute: npm run dev');
      return;
    }

    // Teste 2: Valida√ß√£o de dados de entrada
    console.log('\n2Ô∏è‚É£ Testando valida√ß√µes de entrada...');
    
    // Teste de senha muito curta
    try {
      await axios.post(`${API_BASE}/auth/login`, {
        email: 'teste@exemplo.com',
        senha: '123'
      });
      console.log('‚ùå Deveria ter falhado na valida√ß√£o');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ Valida√ß√£o funcionando - senha muito curta');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }

    // Teste de email inv√°lido
    try {
      await axios.post(`${API_BASE}/auth/login`, {
        email: 'email-invalido',
        senha: 'Senha123'
      });
      console.log('‚ùå Deveria ter falhado na valida√ß√£o de email');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ Valida√ß√£o funcionando - email inv√°lido');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }

    // Teste 3: Valida√ß√£o de registro
    console.log('\n3Ô∏è‚É£ Testando valida√ß√µes de registro...');
    
    // Teste de senha muito curta no registro
    try {
      await axios.post(`${API_BASE}/auth/register`, {
        email: 'teste@exemplo.com',
        senha: '123',
        nome: 'Teste'
      });
      console.log('‚ùå Deveria ter falhado na valida√ß√£o de senha');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ Valida√ß√£o de registro funcionando - senha muito curta');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }

    // Teste de email inv√°lido no registro
    try {
      await axios.post(`${API_BASE}/auth/register`, {
        email: 'email-invalido',
        senha: 'Senha123',
        nome: 'Teste'
      });
      console.log('‚ùå Deveria ter falhado na valida√ß√£o de email');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ Valida√ß√£o de registro funcionando - email inv√°lido');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }

    // Teste 4: Login com usu√°rio inexistente
    console.log('\n4Ô∏è‚É£ Testando login com usu√°rio inexistente...');
    try {
      await axios.post(`${API_BASE}/auth/login`, {
        email: 'usuario@inexistente.com',
        senha: 'Senha123'
      });
      console.log('‚ùå Deveria ter falhado - usu√°rio n√£o existe');
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ Login falhou como esperado - usu√°rio n√£o encontrado');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }

    // Teste 5: Prote√ß√£o de rotas autenticadas
    console.log('\n5Ô∏è‚É£ Testando prote√ß√£o de rotas...');
    
    // Teste sem token
    try {
      await axios.get(`${API_BASE}/auth/validate`);
      console.log('‚ùå Deveria ter falhado - sem token');
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ Prote√ß√£o funcionando - sem token');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }

    console.log('\nüéâ Todos os testes de valida√ß√£o e prote√ß√£o passaram!');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

testAuthAPI(); 