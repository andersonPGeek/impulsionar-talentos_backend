const axios = require('axios');

const BASE_URL = process.env.API_URL || 'http://localhost:3002/api';
const TEST_USER_ID = 1;

console.log('üß™ Iniciando testes da API √Årvore da Vida');
console.log('üìç URL Base:', BASE_URL);

// Dados de teste
const dadosArvoreDaVida = {
  id_usuario: TEST_USER_ID,
  pontuacao_geral: 7,
  criatividade_hobbie: 8,
  plenitude_felicidade: 6,
  espiritualidade: 5,
  saude_disposicao: 7,
  desenvolvimento_intelectual: 8,
  equilibrio_emocional: 6,
  familia: 9,
  desenvolvimento_amoroso: 7,
  vida_social: 6,
  realizacao_proposito: 8,
  recursos_financeiros: 5,
  contribuicao_social: 7
};

const dadosAtualizados = {
  id_usuario: TEST_USER_ID,
  pontuacao_geral: 8,
  criatividade_hobbie: 9,
  plenitude_felicidade: 7,
  espiritualidade: 6,
  saude_disposicao: 8,
  desenvolvimento_intelectual: 9,
  equilibrio_emocional: 7,
  familia: 9,
  desenvolvimento_amoroso: 8,
  vida_social: 7,
  realizacao_proposito: 9,
  recursos_financeiros: 6,
  contribuicao_social: 8
};

// Fun√ß√£o auxiliar para fazer requisi√ß√µes
async function makeRequest(method, endpoint, data = null) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data || error.message, 
      status: error.response?.status 
    };
  }
}

// Teste 1: Criar √°rvore da vida (POST)
async function testCriarArvoreDaVida() {
  console.log('\nüß™ Teste 1: Criar √°rvore da vida (POST)');
  
  const result = await makeRequest('POST', '/arvore-da-vida', dadosArvoreDaVida);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! √Årvore da vida criada');
    console.log('üìä Status:', result.status);
    console.log('üìù Dados criados:', JSON.stringify(result.data.data.arvore_da_vida, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha ao criar √°rvore da vida');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 2: Buscar √°rvore da vida (GET)
async function testBuscarArvoreDaVida() {
  console.log('\nüß™ Teste 2: Buscar √°rvore da vida (GET)');
  
  const result = await makeRequest('GET', `/arvore-da-vida/${TEST_USER_ID}`);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! √Årvore da vida encontrada');
    console.log('üìä Status:', result.status);
    console.log('üìù Dados encontrados:', JSON.stringify(result.data.data.arvore_da_vida, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha ao buscar √°rvore da vida');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 3: Atualizar √°rvore da vida (PUT)
async function testAtualizarArvoreDaVida() {
  console.log('\nüß™ Teste 3: Atualizar √°rvore da vida (PUT)');
  
  const result = await makeRequest('PUT', '/arvore-da-vida', dadosAtualizados);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! √Årvore da vida atualizada');
    console.log('üìä Status:', result.status);
    console.log('üìù Dados atualizados:', JSON.stringify(result.data.data.arvore_da_vida, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha ao atualizar √°rvore da vida');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 4: Verificar atualiza√ß√£o (GET ap√≥s PUT)
async function testVerificarAtualizacao() {
  console.log('\nüß™ Teste 4: Verificar atualiza√ß√£o (GET ap√≥s PUT)');
  
  const result = await makeRequest('GET', `/arvore-da-vida/${TEST_USER_ID}`);
  
  if (result.success) {
    console.log('‚úÖ Sucesso! Verifica√ß√£o da atualiza√ß√£o');
    console.log('üìä Status:', result.status);
    
    const arvore = result.data.data.arvore_da_vida;
    const mudancas = [];
    
    // Verificar se os valores foram atualizados
    Object.keys(dadosAtualizados).forEach(key => {
      if (key !== 'id_usuario' && arvore[key] !== dadosAtualizados[key]) {
        mudancas.push(`${key}: ${dadosArvoreDaVida[key]} ‚Üí ${arvore[key]}`);
      }
    });
    
    if (mudancas.length > 0) {
      console.log('üìù Mudan√ßas detectadas:', mudancas);
    } else {
      console.log('‚ö†Ô∏è Nenhuma mudan√ßa detectada');
    }
    
    console.log('üìù Dados finais:', JSON.stringify(arvore, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha ao verificar atualiza√ß√£o');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 5: Valida√ß√£o de campos obrigat√≥rios
async function testValidacaoCamposObrigatorios() {
  console.log('\nüß™ Teste 5: Valida√ß√£o de campos obrigat√≥rios');
  
  // Teste sem id_usuario
  const dadosInvalidos = { ...dadosArvoreDaVida };
  delete dadosInvalidos.id_usuario;
  
  const result = await makeRequest('POST', '/arvore-da-vida', dadosInvalidos);
  
  if (!result.success && result.status === 400) {
    console.log('‚úÖ Sucesso! Valida√ß√£o funcionando (id_usuario obrigat√≥rio)');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha na valida√ß√£o de campos obrigat√≥rios');
    console.log('üìä Status:', result.status);
    console.log('üìù Resposta:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 6: Valida√ß√£o de valores de pontua√ß√£o
async function testValidacaoValoresPontuacao() {
  console.log('\nüß™ Teste 6: Valida√ß√£o de valores de pontua√ß√£o');
  
  // Teste com valor inv√°lido (11)
  const dadosInvalidos = { ...dadosArvoreDaVida };
  dadosInvalidos.pontuacao_geral = 11;
  
  const result = await makeRequest('POST', '/arvore-da-vida', dadosInvalidos);
  
  if (!result.success && result.status === 400) {
    console.log('‚úÖ Sucesso! Valida√ß√£o funcionando (valor fora do range 0-10)');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha na valida√ß√£o de valores de pontua√ß√£o');
    console.log('üìä Status:', result.status);
    console.log('üìù Resposta:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Teste 7: Buscar √°rvore da vida inexistente
async function testBuscarArvoreInexistente() {
  console.log('\nüß™ Teste 7: Buscar √°rvore da vida inexistente');
  
  const result = await makeRequest('GET', '/arvore-da-vida/999999');
  
  if (!result.success && result.status === 404) {
    console.log('‚úÖ Sucesso! Tratamento correto de √°rvore inexistente');
    console.log('üìä Status:', result.status);
    console.log('üìù Erro:', JSON.stringify(result.error, null, 2));
    return true;
  } else {
    console.log('‚ùå Falha no tratamento de √°rvore inexistente');
    console.log('üìä Status:', result.status);
    console.log('üìù Resposta:', JSON.stringify(result.error, null, 2));
    return false;
  }
}

// Executar todos os testes
async function runAllTests() {
  console.log('üöÄ Iniciando execu√ß√£o dos testes da API √Årvore da Vida');
  console.log('‚è∞', new Date().toISOString());
  
  const tests = [
    { name: 'Criar √°rvore da vida', fn: testCriarArvoreDaVida },
    { name: 'Buscar √°rvore da vida', fn: testBuscarArvoreDaVida },
    { name: 'Atualizar √°rvore da vida', fn: testAtualizarArvoreDaVida },
    { name: 'Verificar atualiza√ß√£o', fn: testVerificarAtualizacao },
    { name: 'Valida√ß√£o campos obrigat√≥rios', fn: testValidacaoCamposObrigatorios },
    { name: 'Valida√ß√£o valores pontua√ß√£o', fn: testValidacaoValoresPontuacao },
    { name: 'Buscar √°rvore inexistente', fn: testBuscarArvoreInexistente }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      if (result) {
        passed++;
      } else {
        failed++;
      }
    } catch (error) {
      console.log(`‚ùå Erro no teste "${test.name}":`, error.message);
      failed++;
    }
  }
  
  console.log('\nüìä Resumo dos Testes');
  console.log('==================');
  console.log(`‚úÖ Passou: ${passed}`);
  console.log(`‚ùå Falhou: ${failed}`);
  console.log(`üìà Total: ${passed + failed}`);
  console.log(`üéØ Taxa de sucesso: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);
  
  if (failed === 0) {
    console.log('\nüéâ Todos os testes passaram!');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
    process.exit(1);
  }
}

// Executar testes se o arquivo for chamado diretamente
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('‚ùå Erro fatal durante execu√ß√£o dos testes:', error);
    process.exit(1);
  });
}

module.exports = {
  testCriarArvoreDaVida,
  testBuscarArvoreDaVida,
  testAtualizarArvoreDaVida,
  testVerificarAtualizacao,
  testValidacaoCamposObrigatorios,
  testValidacaoValoresPontuacao,
  testBuscarArvoreInexistente,
  runAllTests
};
